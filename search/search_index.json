{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Lund University Modular Inversion Algorithm (LUMIA) is a python package for performing atmospheric transport inversions. The release 2020.8 is described in https://www.geosci-model-dev-discuss.net/gmd-2019-227/ can be downloaded here , however, we recommend instead getting the latest commit from github Installation LUMIA is distributed as a python package, the simplest way to install it is using the standard pip command: git clone https://github.com/lumia-dev/lumia.git lumia pip install -e lumia To check that the installation is successful, try import lumia from a python interpreter in a different directory. You can also verify that the command which lumia (from a bash interpreter) points to the lumia script in the bin directory of the git repository you just cloned. Notes: The pip installer automatically installs dependencies. If you prefer using another python package manager (e.g. apt or conda ), you need to install these dependencies manually before (see dependencies list in the setup.py file). It can be a good idea to at least pre-install the cartopy dependency with either conda or your system's package manager ( apt , dnf , etc.): pip will install cartopy, but not the geos library which it depends upon. In general, in case of troubles with dependencies, conda (anaconda, miniconda) is the simplest solution. The inversions also rely on a Fortran executable for calculating successive minimization steps, which needs to be compiled on your system: cd src/congrad make congrad.exe (you will need the netCDF-Fortran library and a fotran compiler, e.g. gfortran). Usage As a program The lumia script (under the bin directory of the git repository) can be used to run forward simulations and inversions: lumia forward --rc forward.yaml # run a forward simulation based on the forward.yaml configuration file or lumia optim --rc optim.yaml # run an inversion using the optim.yaml configuration file For information on how to build the yaml configuration files, see the tutorial As a python library The lumia python package contains several python modules, which can be imported independently (e.g. import rctools , from lumia import obsdb , etc.): The lumia module is the main one, and implements the inversion themselves. It also contains submodules needed to read/write lumia-formatted observation and emission files The transport module contains the pseudo-transport model (i.e. based on pre-computed Lagrangian footprints). It can be used independently of lumia . The gridtools , rctools , archive and icosPortalAccess modules are small utilities used by lumia and/or transport . See the tutorial for an example of a script using lumia to perform an inversion. Developer access LUMIA is a scientific tool. The code is made available under the EUPL v1.2 open source license, and it is not provided with any warranty. In particular: it is in constant evolution; it has bugs that we haven't found yet; some parts of the code are insufficiently documented. You are free to download it and use it, but you are strongly encouraged to contact us before, to discuss the level of support that we can provide, and give you a developer access to our git repository.","title":"Home"},{"location":"#installation","text":"LUMIA is distributed as a python package, the simplest way to install it is using the standard pip command: git clone https://github.com/lumia-dev/lumia.git lumia pip install -e lumia To check that the installation is successful, try import lumia from a python interpreter in a different directory. You can also verify that the command which lumia (from a bash interpreter) points to the lumia script in the bin directory of the git repository you just cloned. Notes: The pip installer automatically installs dependencies. If you prefer using another python package manager (e.g. apt or conda ), you need to install these dependencies manually before (see dependencies list in the setup.py file). It can be a good idea to at least pre-install the cartopy dependency with either conda or your system's package manager ( apt , dnf , etc.): pip will install cartopy, but not the geos library which it depends upon. In general, in case of troubles with dependencies, conda (anaconda, miniconda) is the simplest solution. The inversions also rely on a Fortran executable for calculating successive minimization steps, which needs to be compiled on your system: cd src/congrad make congrad.exe (you will need the netCDF-Fortran library and a fotran compiler, e.g. gfortran).","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#as-a-program","text":"The lumia script (under the bin directory of the git repository) can be used to run forward simulations and inversions: lumia forward --rc forward.yaml # run a forward simulation based on the forward.yaml configuration file or lumia optim --rc optim.yaml # run an inversion using the optim.yaml configuration file For information on how to build the yaml configuration files, see the tutorial","title":"As a program"},{"location":"#as-a-python-library","text":"The lumia python package contains several python modules, which can be imported independently (e.g. import rctools , from lumia import obsdb , etc.): The lumia module is the main one, and implements the inversion themselves. It also contains submodules needed to read/write lumia-formatted observation and emission files The transport module contains the pseudo-transport model (i.e. based on pre-computed Lagrangian footprints). It can be used independently of lumia . The gridtools , rctools , archive and icosPortalAccess modules are small utilities used by lumia and/or transport . See the tutorial for an example of a script using lumia to perform an inversion.","title":"As a python library"},{"location":"#developer-access","text":"LUMIA is a scientific tool. The code is made available under the EUPL v1.2 open source license, and it is not provided with any warranty. In particular: it is in constant evolution; it has bugs that we haven't found yet; some parts of the code are insufficiently documented. You are free to download it and use it, but you are strongly encouraged to contact us before, to discuss the level of support that we can provide, and give you a developer access to our git repository.","title":"Developer access"},{"location":"settings/","text":"Configuration file The settings are contained in a configuration file in yaml format. The file contains six major sections: - the run section, which contains general simulation settings (domain, resolution, etc.) - the emissions section contains all settings needed to construct the file containing the surface fluxes - the observations section contains all settings needed to handle the observations (obs file, units, uncertainties, etc.) - the optimize section contains settings specific to the inversion (which category needs to be optimized, with which uncertainties, etc.) - the model section contains settings of the transport model - the minimizer section contains settings of the conjugate gradient minimizer Additional sections may be defined for convenience. The values in this page are those used for the tutorial run section General settings (simulation extent and resolution, paths, etc.) run: start : 2018-01-01 end : 2019-01-01 timestep : 1h domain : eurocom025x025 grid : ${Grid:{lon0:-15, lat0:33, lon1:35, lat1:73, dlon:.5, dlat:.5}} tracers : co2 paths : data : data output : output footprints : footprints temp : temp start and end (time boundaries of the simulation) can be in any format supported by pandas.Timestamp . timestep can be anything supported by pandas.tseries.frequencies.to_offset . The grid key defines an instance of gridtools.Grid . The syntax is ${Grid:value} , with value a python dictionary containing keywords passed to gridtools.Grid . emissions section: The section contains keys needed to construct the emissions file. There needs to be one subsection for each tracer (only one \"co2\" tracer in this example), and an emissions.tracers key is also necessary. The emission file for the simulation is constructed from annual, category-specific, pre-processed emission files. The keys define the naming pattern for these files: - the files are in data/fluxes/nc/eurocom025x025/1h - the files for category biosphere are named following the pattern flux_co2.EDGARv4.3_BP2019.%Y.nc emissions : tracers : ${run.tracers} co2 : region : ${run.grid} interval : ${run.timestep} categories : fossil : EDGARv4.3_BP2019 biosphere : LPJ-GUESS_verify prefix : flux_co2. path : ${run.paths.data}/fluxes/nc/${run.domain}/{run.timestep}/ observations section: The section contains keys needed to read and process the observation database. In this tutorial, it just points to the right observation file, but further settings are possible, to restrict the time period, setup the uncertainties, etc. These settings are read in two places: - directly in the relevant obsdb module ( lumia.obsdb.InversionDb.obsdb class) - in a pre-processing step, e.g. in the lumia.ui.setup_observations method. See the in-line documentation of these two modules for further info observations : file : path : doc/observations/obs_example.tar.gz optimize section This section contains the keys that define the inversion problem. It contains two large subsection: - one \"emissions\" subsection, which contains settings related to the state vector and its uncertainty matrix (structure of the uncertainty, number of optimized categories, resolution of the optimization, etc.) - one \"observations\" subsection, which defines the way observation uncertainties are treated: optimize : emissions : co2 : biosphere : annual_uncertainty : 0.45 PgC spatial_correlation : 500-g temporal_correlation : 30D npoints : 2500 optimization_interval : 7d observations : co2 : uncertainty : type : dyn freq : 7d Here, the emissions will be optimized for the biosphere category of the co2 tracer. The total uncertainty is set to 0.45 PgC ( annual_uncertainty ), with correlations decaying spatially ( spatial_correlation ) following a 500 km Gaussian function, and temporally ( temporal_correlation ) following a 30 days exponential function (see sect 3.5.1 in https://gmd.copernicus.org/articles/14/3383/2021/ ). The inversion solves for 2500 cluster of pixels ( npoints ) each seven days ( optimization_interval ). With observations.co2.uncertainty.type set to dyn , the observation uncertainties are determined based on the quality of the fit of the short term (< 7 days) variability of the modelled concentration to the observed concentrations (see setup_uncertainties method). congrad section: This short section contains settings for the conjugate gradient minimizer. The main relevant user-setting is max_number_of_iterations (set to a lower value to speed things up, set to > 50 for scientific results): congrad : max_number_of_iterations : 80 communication_file : ${run.paths.temp}/congrad.nc executable : ${lumia:src/congrad/congrad.exe} model section This section contains settings for the interface between lumia and the transport model (i.e. lumia/obsoperator ) model : transport : exec : ${lumia:transport/multitracer.py} serial : False output : steps : ['apri', 'apos'] path : ${run.paths} Note the syntax of the model.transport.exec key: ${lumia:path} points to a path relative to the installation path of the lumia python module.","title":"Settings"},{"location":"settings/#configuration-file","text":"The settings are contained in a configuration file in yaml format. The file contains six major sections: - the run section, which contains general simulation settings (domain, resolution, etc.) - the emissions section contains all settings needed to construct the file containing the surface fluxes - the observations section contains all settings needed to handle the observations (obs file, units, uncertainties, etc.) - the optimize section contains settings specific to the inversion (which category needs to be optimized, with which uncertainties, etc.) - the model section contains settings of the transport model - the minimizer section contains settings of the conjugate gradient minimizer Additional sections may be defined for convenience. The values in this page are those used for the tutorial","title":"Configuration file"},{"location":"settings/#run-section","text":"General settings (simulation extent and resolution, paths, etc.) run: start : 2018-01-01 end : 2019-01-01 timestep : 1h domain : eurocom025x025 grid : ${Grid:{lon0:-15, lat0:33, lon1:35, lat1:73, dlon:.5, dlat:.5}} tracers : co2 paths : data : data output : output footprints : footprints temp : temp start and end (time boundaries of the simulation) can be in any format supported by pandas.Timestamp . timestep can be anything supported by pandas.tseries.frequencies.to_offset . The grid key defines an instance of gridtools.Grid . The syntax is ${Grid:value} , with value a python dictionary containing keywords passed to gridtools.Grid .","title":"run section"},{"location":"settings/#emissions-section","text":"The section contains keys needed to construct the emissions file. There needs to be one subsection for each tracer (only one \"co2\" tracer in this example), and an emissions.tracers key is also necessary. The emission file for the simulation is constructed from annual, category-specific, pre-processed emission files. The keys define the naming pattern for these files: - the files are in data/fluxes/nc/eurocom025x025/1h - the files for category biosphere are named following the pattern flux_co2.EDGARv4.3_BP2019.%Y.nc emissions : tracers : ${run.tracers} co2 : region : ${run.grid} interval : ${run.timestep} categories : fossil : EDGARv4.3_BP2019 biosphere : LPJ-GUESS_verify prefix : flux_co2. path : ${run.paths.data}/fluxes/nc/${run.domain}/{run.timestep}/","title":"emissions section:"},{"location":"settings/#observations-section","text":"The section contains keys needed to read and process the observation database. In this tutorial, it just points to the right observation file, but further settings are possible, to restrict the time period, setup the uncertainties, etc. These settings are read in two places: - directly in the relevant obsdb module ( lumia.obsdb.InversionDb.obsdb class) - in a pre-processing step, e.g. in the lumia.ui.setup_observations method. See the in-line documentation of these two modules for further info observations : file : path : doc/observations/obs_example.tar.gz","title":"observations section:"},{"location":"settings/#optimize-section","text":"This section contains the keys that define the inversion problem. It contains two large subsection: - one \"emissions\" subsection, which contains settings related to the state vector and its uncertainty matrix (structure of the uncertainty, number of optimized categories, resolution of the optimization, etc.) - one \"observations\" subsection, which defines the way observation uncertainties are treated: optimize : emissions : co2 : biosphere : annual_uncertainty : 0.45 PgC spatial_correlation : 500-g temporal_correlation : 30D npoints : 2500 optimization_interval : 7d observations : co2 : uncertainty : type : dyn freq : 7d Here, the emissions will be optimized for the biosphere category of the co2 tracer. The total uncertainty is set to 0.45 PgC ( annual_uncertainty ), with correlations decaying spatially ( spatial_correlation ) following a 500 km Gaussian function, and temporally ( temporal_correlation ) following a 30 days exponential function (see sect 3.5.1 in https://gmd.copernicus.org/articles/14/3383/2021/ ). The inversion solves for 2500 cluster of pixels ( npoints ) each seven days ( optimization_interval ). With observations.co2.uncertainty.type set to dyn , the observation uncertainties are determined based on the quality of the fit of the short term (< 7 days) variability of the modelled concentration to the observed concentrations (see setup_uncertainties method).","title":"optimize section"},{"location":"settings/#congrad-section","text":"This short section contains settings for the conjugate gradient minimizer. The main relevant user-setting is max_number_of_iterations (set to a lower value to speed things up, set to > 50 for scientific results): congrad : max_number_of_iterations : 80 communication_file : ${run.paths.temp}/congrad.nc executable : ${lumia:src/congrad/congrad.exe}","title":"congrad section:"},{"location":"settings/#model-section","text":"This section contains settings for the interface between lumia and the transport model (i.e. lumia/obsoperator ) model : transport : exec : ${lumia:transport/multitracer.py} serial : False output : steps : ['apri', 'apos'] path : ${run.paths} Note the syntax of the model.transport.exec key: ${lumia:path} points to a path relative to the installation path of the lumia python module.","title":"model section"},{"location":"tutorial/","text":"Step-by-step inversion tutorial This tutorial shows how to run a simple CO2 inversion, using example data. This assumes that: LUMIA has been installed The example observation file (obs_example.tgz) and configuration file (inversion.yaml) are present in the current folder Footprint files are present on disk, in the ./footprints folder Pre-processed emission files are present in the ./data/fluxes/eurocom025x025/1h folder","title":"Tutorial"},{"location":"tutorial/#step-by-step-inversion-tutorial","text":"This tutorial shows how to run a simple CO2 inversion, using example data. This assumes that: LUMIA has been installed The example observation file (obs_example.tgz) and configuration file (inversion.yaml) are present in the current folder Footprint files are present on disk, in the ./footprints folder Pre-processed emission files are present in the ./data/fluxes/eurocom025x025/1h folder","title":"Step-by-step inversion tutorial"}]}